#!/bin/bash

# Diagnostic Script –¥–ª—è Helper for Jane
# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_redis() {
    echo -e "${BLUE}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis ===${NC}"
    
    if ! command -v redis-server &> /dev/null; then
        error "Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    if ! pgrep redis-server > /dev/null; then
        warn "Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º..."
        sudo systemctl start redis-server
        sleep 2
    fi
    
    if redis-cli ping | grep -q "PONG"; then
        log "Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ Redis
        REDIS_MEMORY=$(redis-cli info memory | grep used_memory_human | cut -d: -f2 | tr -d '\r')
        log "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ Redis: $REDIS_MEMORY"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª—é—á–µ–π
        REDIS_KEYS=$(redis-cli dbsize)
        log "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –≤ Redis: $REDIS_KEYS"
        
    else
        error "Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping"
        echo "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:"
        echo "  sudo systemctl restart redis-server"
        echo "  sudo systemctl status redis-server"
        return 1
    fi
}

check_nodejs() {
    echo -e "${BLUE}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js ===${NC}"
    
    if ! command -v node &> /dev/null; then
        error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    NODE_VERSION=$(node -v)
    NPM_VERSION=$(npm -v)
    
    log "Node.js –≤–µ—Ä—Å–∏—è: $NODE_VERSION"
    log "npm –≤–µ—Ä—Å–∏—è: $NPM_VERSION"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Node.js
    MAJOR_VERSION=$(echo $NODE_VERSION | sed 's/v//' | cut -d. -f1)
    if [[ $MAJOR_VERSION -lt 18 ]]; then
        error "–¢—Ä–µ–±—É–µ—Ç—Å—è Node.js 18+, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è $NODE_VERSION"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    if command -v pm2 &> /dev/null; then
        log "PM2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(pm2 -v)"
    else
        warn "PM2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

check_ports() {
    echo -e "${BLUE}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ ===${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 3001 (backend)
    if netstat -tuln | grep -q ":3001 "; then
        warn "–ü–æ—Ä—Ç 3001 –∑–∞–Ω—è—Ç:"
        netstat -tuln | grep ":3001 "
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É
        PORT_PROCESS=$(lsof -t -i:3001 2>/dev/null || echo "–Ω–µ –Ω–∞–π–¥–µ–Ω")
        if [[ "$PORT_PROCESS" != "–Ω–µ –Ω–∞–π–¥–µ–Ω" ]]; then
            log "–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É 3001: PID $PORT_PROCESS"
            ps -p $PORT_PROCESS -o pid,ppid,cmd 2>/dev/null || echo "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è"
        fi
    else
        log "–ü–æ—Ä—Ç 3001 —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 5173 (frontend)
    if netstat -tuln | grep -q ":5173 "; then
        warn "–ü–æ—Ä—Ç 5173 –∑–∞–Ω—è—Ç:"
        netstat -tuln | grep ":5173 "
        
        PORT_PROCESS=$(lsof -t -i:5173 2>/dev/null || echo "–Ω–µ –Ω–∞–π–¥–µ–Ω")
        if [[ "$PORT_PROCESS" != "–Ω–µ –Ω–∞–π–¥–µ–Ω" ]]; then
            log "–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É 5173: PID $PORT_PROCESS"
            ps -p $PORT_PROCESS -o pid,ppid,cmd 2>/dev/null || echo "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è"
        fi
    else
        log "–ü–æ—Ä—Ç 5173 —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 6379 (Redis)
    if netstat -tuln | grep -q ":6379 "; then
        log "Redis –ø–æ—Ä—Ç 6379 –∞–∫—Ç–∏–≤–µ–Ω"
    else
        warn "Redis –ø–æ—Ä—Ç 6379 –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
    fi
}

check_project_structure() {
    echo -e "${BLUE}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ ===${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    FILES=(
        "package.json"
        "server/package.json"
        "server/.env"
        ".env"
    )
    
    for file in "${FILES[@]}"; do
        if [[ -f "$file" ]]; then
            log "‚úÖ $file —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else
            error "‚ùå $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    DIRS=(
        "server"
        "uploads"
        "data"
        "logs"
    )
    
    for dir in "${DIRS[@]}"; do
        if [[ -d "$dir" ]]; then
            log "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else
            warn "‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            mkdir -p "$dir"
            log "üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir"
        fi
    done
}

check_database() {
    echo -e "${BLUE}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===${NC}"
    
    DB_PATH="server/data/database.sqlite"
    
    if [[ -f "$DB_PATH" ]]; then
        log "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: $DB_PATH"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        DB_SIZE=$(du -h "$DB_PATH" | cut -f1)
        log "–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $DB_SIZE"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ SQLite
        if command -v sqlite3 &> /dev/null; then
            TABLES=$(sqlite3 "$DB_PATH" ".tables" 2>/dev/null || echo "–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è")
            if [[ "$TABLES" != "–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è" ]]; then
                log "–¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: $TABLES"
            else
                warn "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
            fi
        else
            warn "sqlite3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ë–î"
        fi
    else
        warn "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        log "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:"
        echo "  cd server && npm run migrate"
    fi
}

check_dependencies() {
    echo -e "${BLUE}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if [[ -f "package.json" ]]; then
        log "–ü—Ä–æ–≤–µ—Ä–∫–∞ frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        if [[ -d "node_modules" ]]; then
            log "‚úÖ Frontend node_modules —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else
            warn "‚ùå Frontend node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω"
            echo "  –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm install"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if [[ -f "server/package.json" ]]; then
        log "–ü—Ä–æ–≤–µ—Ä–∫–∞ backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        if [[ -d "server/node_modules" ]]; then
            log "‚úÖ Backend node_modules —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else
            warn "‚ùå Backend node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω"
            echo "  –í—ã–ø–æ–ª–Ω–∏—Ç–µ: cd server && npm install"
        fi
    fi
}

check_environment() {
    echo -e "${BLUE}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend .env
    if [[ -f "server/.env" ]]; then
        log "–ü—Ä–æ–≤–µ—Ä–∫–∞ server/.env..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if grep -q "OPENAI_API_KEY=your_openai_api_key_here" server/.env; then
            warn "‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        elif grep -q "OPENAI_API_KEY=" server/.env; then
            log "‚úÖ OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        else
            warn "‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        fi
        
        if grep -q "JWT_SECRET=" server/.env; then
            log "‚úÖ JWT_SECRET –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        else
            warn "‚ùå JWT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
        if grep -q "REDIS_URL=" server/.env; then
            log "‚úÖ Redis URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        else
            warn "‚ùå Redis URL –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    else
        error "‚ùå server/.env –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend .env
    if [[ -f ".env" ]]; then
        log "‚úÖ Frontend .env –Ω–∞–π–¥–µ–Ω"
    else
        warn "‚ùå Frontend .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

check_pm2() {
    echo -e "${BLUE}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ PM2 ===${NC}"
    
    if ! command -v pm2 &> /dev/null; then
        error "PM2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    log "PM2 –≤–µ—Ä—Å–∏—è: $(pm2 -v)"
    
    # –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    PM2_STATUS=$(pm2 list 2>/dev/null | grep -E "(helper-jane|online|stopped|errored)" || echo "–Ω–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    
    if [[ "$PM2_STATUS" != "–Ω–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤" ]]; then
        log "–°—Ç–∞—Ç—É—Å PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:"
        pm2 list
    else
        log "PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
    fi
}

check_system_resources() {
    echo -e "${BLUE}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ ===${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    MEMORY_INFO=$(free -h | grep "Mem:")
    log "–ü–∞–º—è—Ç—å: $MEMORY_INFO"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    DISK_INFO=$(df -h . | tail -n1)
    log "–î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: $DISK_INFO"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CPU
    CPU_LOAD=$(uptime | awk -F'load average:' '{print $2}')
    log "–ó–∞–≥—Ä—É–∑–∫–∞ CPU: $CPU_LOAD"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    PROCESS_COUNT=$(ps aux | wc -l)
    log "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $PROCESS_COUNT"
}

fix_common_issues() {
    echo -e "${BLUE}=== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º ===${NC}"
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤
    read -p "–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã 3001 –∏ 5173? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "–û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç–∞—Ö
        PORT_3001=$(lsof -t -i:3001 2>/dev/null || echo "")
        PORT_5173=$(lsof -t -i:5173 2>/dev/null || echo "")
        
        if [[ -n "$PORT_3001" ]]; then
            log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É 3001..."
            kill -9 $PORT_3001 2>/dev/null || true
        fi
        
        if [[ -n "$PORT_5173" ]]; then
            log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5173..."
            kill -9 $PORT_5173 2>/dev/null || true
        fi
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        pm2 stop all 2>/dev/null || true
        pm2 delete all 2>/dev/null || true
        
        sleep 2
        log "–ü–æ—Ä—Ç—ã –æ—á–∏—â–µ–Ω—ã"
    fi
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Redis
    read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Redis? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Redis..."
        sudo systemctl restart redis-server
        sleep 2
        
        if redis-cli ping | grep -q "PONG"; then
            log "‚úÖ Redis –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        else
            error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Redis"
        fi
    fi
    
    # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    read -p "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑